# Python source files

*.py linguist-language=Python
*.pyi linguist-language=Python

# Clean Code Guidelines

Core Principle:
Code should be easily understood by everyone on the team, readable, changeable, extensible, and maintainable.

General Rules:
- Follow standard conventions
- Keep it simple (KISS principle)
- Leave code cleaner than you found it (Boy Scout Rule)
- Always find and fix root causes
- Reduce complexity at every opportunity

Design Rules:
- Keep configurable data at high levels
- Prefer polymorphism over if/else or switch/case
- Separate multi-threading code
- Prevent over-configurability
- Use dependency injection
- Follow Law of Demeter (class knows only direct dependencies)

Naming Rules:
- Choose descriptive and unambiguous names
- Make meaningful distinctions
- Use pronounceable names
- Use searchable names
- Replace magic numbers with named constants
- Avoid encodings and type information in names

Function Rules:
- Keep functions small and focused
- Do one thing per function
- Use descriptive names
- Minimize arguments
- Avoid side effects
- Split methods instead of using flag arguments

Comments and Documentation:
- Explain intent in code, not comments
- Avoid redundant comments
- Remove commented-out code
- Use comments for:
  - Intent explanation
  - Code clarification
  - Warning of consequences

Code Structure:
- Separate concepts vertically
- Keep related code vertically dense
- Declare variables close to usage
- Keep dependent functions close
- Place similar functions together
- Maintain short line length
- Use whitespace to show relationships
- Maintain consistent indentation

Object and Data Structure Design:
- Hide internal structure
- Prefer data structures for data-holding
- Avoid hybrid structures
- Keep classes small and focused
- Minimize instance variables
- Maintain proper inheritance hierarchy
- Prefer many functions over code injection

Code Quality Indicators:
Avoid:
- Rigidity (cascade changes)
- Fragility (breaks easily)
- Immobility (hard to reuse)
- Needless complexity
- Needless repetition
- Opacity (hard to understand)

# Python Style Guidelines

General Principles:
- Write modern and pythonic code
- Prioritize readability and simplicity
- Be explicit about intentions
- Leverage Python's built-in features
- Follow PEP 8 style guide
- Use list comprehensions and generator expressions appropriately
- Employ context managers (with statements)
- Use type hinting consistently
- Use f-strings for string formatting
- Apply functional programming where it enhances readability

Code Style Standards:
- Follow PEP 8 (https://pep8.org/)
- Write Clean Code principles
- Follow 12 Factor App methodology (https://12factor.net)

Static Analysis Tools:
- Use black for code formatting
- Use isort for import sorting
- Use flake8 for linting
- Enforce via pre-commit hooks

Naming and Import Conventions:
- Use absolute imports only, no relative imports
- For capital letters in camel case:
  - Only capitalize first letter (e.g., ApiClient, EltPipeline)
  - Avoid all caps in compound names

Attribute Guidelines:
- Allow direct access to public attributes
- Create specific functions for side-effect operations
- Use underscore conventions:
  - Single leading (_) for protected
  - Double leading (__) for private
  - Trailing (_) for Python keyword conflicts

# Third Party Package Guidelines

License Requirements:
- Acceptable licenses:
  - Apache
  - BSD
  - PSFL (Python Software Foundation License)
  - MIT
- Prohibited licenses:
  - GPL (GNU General Public License)
- Case-by-case review required:
  - LGPL (Lesser General Public License)
  - Any other licenses

Package Selection Criteria:
- Cross-platform compatibility (OS independent)
- Active maintenance status
- Wide community adoption
- Good documentation
- Stable release history

Best Practices:
- Verify licenses during both development and code review
- Check license on pypi.org before inclusion
- Consult team lead for non-standard licenses
- Document package dependencies clearly
- Monitor for license changes in updates
- Keep dependency list minimal and focused

# Docstring Guidelines

Usage:
- Place docstrings BELOW class or function definitions
- Document parameter usage when not self-explanatory
- Explain class/function purpose and context when needed
- Focus on intent and consequences (Clean Code principles)

When to Avoid:
- Don't document raised exceptions
- Don't duplicate type information (use type hints instead)
- Don't restate what's clear from naming

Format:
- Use triple quotes (""")
- Follow Google docstring format (https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)
- Omit type information (use type annotations instead)
- Add meaningful context beyond variable names
- Support IDE interpretation and documentation tools

Best Practices:
- Keep docstrings concise and meaningful
- Focus on explaining "why" rather than "what"
- Document non-obvious behavior or requirements
- Consider IDE and documentation tool integration

# Interface and Abstract Class Guidelines

Interface Conventions:
- Class name must end in "Interface"
- Use Protocol or ABC (prefer Protocol for new code)
- No constructor implementation
- Use ellipsis (...) for function bodies
- Keep interfaces minimal and focused

Abstract Class Conventions:
- Class name may include "Abstract"
- Abstract methods raise NotImplementedError
- Can include shared implementation code
- Use when common functionality needed across implementations

Example Usage:
```python
class SomeInterface:
    def some_function(self) -> str:
        raise NotImplementedError()

class SomeImplementation(SomeInterface):
    def some_function(self) -> str:
        return "something"
```

Implementation Guidelines:
- Prefer Protocol over ABC for new code (Python 3.8+)
- Use ABC only when explicit hierarchy checking needed
- Keep interfaces minimal and focused
- Document interface contracts clearly
- Use type hints consistently
- Avoid complex inheritance hierarchies

# SQLAlchemy Guidelines

Session Management:
- Keep session start and end close together
- Pass sessions downstream when needed (e.g., permissions.check(session=session))
- One session per logical transaction
- Use context managers for session handling

Example Usage:
```python
with Session(engine) as session:
    session.begin()
    try:
        session.add(some_object)
        session.add(some_other_object)
    except:
        session.rollback()
        raise
    else:
        session.commit()
```

Best Practices:
- Use separate sessions for distinct operations
- Always handle rollbacks in exception cases
- Commit only after all operations succeed
- Follow SQLAlchemy's documentation guidelines: https://docs.sqlalchemy.org/en/14/orm/session.html

# Database Persistence Guidelines

Infrastructure Requirements:
- One database server per environment/cluster
- No root user access for database operations
- One database per service with dedicated user
- Special cases may use separate servers (e.g., Hermes, Keycloak)
- Use DATABASE_DSN environment variable for credentials
- Service access limited to its own database

Database Setup Process:
1. Connect using postgres user via EC2 instance
2. Create database: `CREATE DATABASE <databasename>;`
3. Generate secure 32-char password
4. Create user: `CREATE USER <databasename>user WITH PASSWORD '<password>';`
5. Grant privileges: `GRANT ALL PRIVILEGES ON DATABASE <databasename> TO <databaseuser>;`
6. Store credentials in AWS Secrets Manager
7. Create Kubernetes secret for database DSN
8. Scale down EC2 instance after setup

Environment-Specific Guidelines:
DEV:
- Use dev/db-cluster credentials
- Store secrets as dev/db-cluster/<databasename>
- Configure in dev environment namespace

PROD:
- Use prod/db-cluster/postgres credentials
- Store secrets as prod/db-cluster/<databasename>
- Follow strict security protocols

Read-Only User Setup:
```sql
-- Create read-only user
CREATE USER <databasename>user_read WITH PASSWORD '<password>';

-- Grant current table access
GRANT SELECT ON ALL TABLES IN SCHEMA public TO <databasename>user_read;

-- Grant future table access
ALTER DEFAULT PRIVILEGES IN SCHEMA public
   GRANT SELECT ON TABLES TO <databasename>user_read;
```

Best Practices:
- Use alembic for schema management
- Implement proper seeding through migrations
- Follow principle of least privilege
- Maintain separate credentials per environment
- Document database access patterns
- Regular credential rotation
- Monitor database access and usage

# Alembic Script Guidelines

Enum Handling:
- Avoid PostgreSQL enums when possible
- Prefer plain strings or foreign key references
- Never import enum classes from source code
- Use plain strings in migration scripts for version stability

Implementation Rules:
- Use PostgreSQL-specific Enum class:
  ```python
  from sqlalchemy.dialects import postgresql
  postgresql.ENUM
  ```
- Set create_type=False and manage enum creation/deletion explicitly
- Name enum references with "_reference" suffix when reusing
- Avoid checkfirst parameter with explicit creation/deletion

Example Usage:
```python
from alembic import op
from sqlalchemy.dialects import postgresql

# Initial enum creation
my_enum = postgresql.ENUM(
    "VALUE1",
    "VALUE2",
    name="enum_name",
    create_type=False,
)
my_enum.create(op.get_bind())

# Later reference to existing enum
my_enum_reference = postgresql.ENUM(
    name="enum_name",
    create_type=False,
)
```

Best Practices:
- Keep migrations atomic and focused
- Use explicit enum management
- Maintain version stability
- Follow consistent naming patterns
- Document enum changes clearly

# Test files

test_*.py test=true
*/test/* test=true
*/tests/* test=true

# Configuration files

*.yml config=true
*.yaml config=true
*.json config=true
*.toml config=true
*.ini config=true
.env* config=true

# Documentation

*.md documentation=true
docs/* documentation=true

# Database migrations

migrations/* database=true
alembic/* database=true

# Dependencies

requirements.txt dependencies=true
poetry.lock dependencies=true
pyproject.toml dependencies=true

# Docker related
Dockerfile docker=true
docker-compose*.yml docker=true
.dockerignore docker=true

# Git files
.gitignore git=true
.git/* git=true

# IDE settings
.vscode/* ide=true
.idea/* ide=true

# Build artifacts to ignore
__pycache__/* ignore=true
*.pyc ignore=true
*.pyo ignore=true
*.pyd ignore=true
.Python ignore=true
build/* ignore=true
develop-eggs/* ignore=true
dist/* ignore=true
downloads/* ignore=true
eggs/* ignore=true
.eggs/* ignore=true
lib/* ignore=true
lib64/* ignore=true
parts/* ignore=true
sdist/* ignore=true
var/* ignore=true
*.egg-info/* ignore=true
.installed.cfg ignore=true
*.egg ignore=true
.env ignore=true
.venv/* ignore=true
venv/* ignore=true
ENV/* ignore=true

# FastAPI specific guidelines
You are an expert in Python, FastAPI, and scalable API development.

Key Principles

- Write concise, technical responses with accurate Python examples
- Use functional, declarative programming; avoid classes where possible
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission)
- Use lowercase with underscores for directories and files
- Favor named exports for routes and utility functions
- Use the Receive an Object, Return an Object (RORO) pattern

Python/FastAPI

- Use def for pure functions and async def for asynchronous operations
- Use type hints for all function signatures
- Prefer Pydantic models over raw dictionaries for input/output validation
- Follow FastAPI's async-first approach

Exception Handling and Validation

- Use custom exception classes inheriting from FastAPI's HTTPException
- Define structured error response models using Pydantic
- Handle exceptions at the route level with specific error responses
- Include field-specific error details in validation errors
- Use early validation in operations
- Implement proper error logging
- Chain error handling for nested operations
- Use appropriate status codes for different error types

Dependencies

- FastAPI
- Pydantic
- Database libraries (SQLAlchemy, asyncpg, etc.)
- Testing frameworks (pytest, pytest-asyncio)

FastAPI-Specific Guidelines

- Use functional components and Pydantic models
- Use declarative route definitions with clear return type annotations
- Use async def for I/O operations
- Use lifespan context managers for startup/shutdown
- Use middleware for cross-cutting concerns
- Use dependency injection for shared resources
- Use background tasks for long-running operations
- Use WebSocket for real-time communication

Performance Optimization

- Use async operations for I/O-bound tasks
- Implement appropriate caching strategies
- Optimize data serialization/deserialization
- Use lazy loading for large datasets
- Use connection pooling for databases
- Use background tasks for heavy computations

Code Structure

- models.py: Data models
- schemas.py: API schemas
- routes.py: Endpoints
- dependencies.py: Shared dependencies
- services.py: Business logic
- repositories.py: Data access
- config.py: Configuration

Key Conventions

1. Use dependency injection for managing state and resources
2. Use async operations appropriately:
   - Async for I/O operations
   - Sync for CPU-bound tasks
   - Use background tasks for long-running operations
3. Use environment variables for configuration
4. Follow security best practices:
   - Use proper authentication/authorization
   - Validate all inputs
   - Sanitize all outputs
   - Use CORS appropriately
   - Rate limit where necessary

# API Structure Guidelines

Standard Directory Layout:
```
- charts/                    # Helm charts
  - templates/               # Chart templates
- infrastructure/            # Infrastructure as code
  - Cloudformation/         # AWS CloudFormation templates
- public/                    # Public assets
  - openapi.yaml            # OpenAPI specification
- src/                      # Source code
  - {aggregate_name}/       # Domain-specific code
  - routes/                 # API routes
    - failures/             # Error definitions
    - {aggregate_name}/     # Route groups by domain
      - v1/                 # Version 1 endpoints
      - v2/                 # Version 2 endpoints
  - permission/             # Permission management
  - service/                # Service layer
  - configuration.py        # App configuration
  - container.py           # Dependency container
  - route_registry.py      # Route registration
  - version.py            # Version information
- database/                # Database migrations
- scripts/                 # Utility scripts
- test/                    # Test files
  - unittest/             # Unit tests
  - postman/              # Postman collections
  - integrationtest/      # Integration tests
- Dockerfile              # Container definition
- README.md               # Project documentation
- application.py         # Application entry point
- gunicorn.py           # WSGI server config
- CHANGELOG.md           # Version history
- poetry.lock           # Dependency lock file
- pyproject.toml        # Project metadata
```

Organization Rules:
- Group code by domain aggregates
- Separate routes by version and domain
- Keep configuration centralized
- Maintain clear separation of concerns
- Follow consistent naming patterns
- Keep related files together
- Use clear, descriptive directory names

Route Organization:
```
src/
  routes/
    v1/                     # Version 1 routes
      route-a/             # Route group A
      route-b/             # Route group B
    v2/                     # Version 2 routes
      route-a/             # Updated route group A
      route-c/             # New route group C
```

Route Naming Conventions:
- Include version prefix (e.g., `v1`, `v2`)
- Add system/scope identifier (e.g., `user`, `project`)
- Use action-based names (e.g., `create`, `update`)
- Use expressive business logic names (e.g., `composite-pipeline/fork-from-step`)
- Follow format: `{version}/{system}/{action}`
- Examples:
  - `v1/user/create`
  - `v2/project/archive`
  - `v1/composite-pipeline/fork-from-step`

# API Design Guidelines

- Follow command/query separation principle
- Use POST {version}/{noun}/{verb} or POST {version}/{group}/{noun}/{verb} path schema
- Use meaningful business domain terms in routes
- Avoid CRUD terminology in route names
- Use dashes for compound words in paths if hierarchical structure not possible
- Version routes in path (e.g. v1/project/finish)
- Use POST by default for commands and queries
- Use GET only when proper caching is implemented

API Response Format:

- Use extended JSend format for responses
- Always return objects in "data" property
- Use child properties for lists/primitives
- Follow HTTP status code guidelines:
  - 404: Only for non-existent routes
  - 403: For permission issues
  - 500: Only from framework error handler
  - 200: Default success response

Documentation Requirements:

- Use OpenAPI Specification (OAS)
- Include examples, descriptions, deprecation flags, and tags
- Publish Swagger UI as index page
- Document for both internal and external users

Naming Conventions:

- Repository: {topic}-api
- DNS: {topic}.paretos.com
- Client: {topic}-api-client

Versioning Strategy:

- Create independent route versions for breaking changes
- Group routes into API versions
- Mark old routes as deprecated
- Add new routes to most appropriate version

Null Value Handling:

- Avoid null values except for explicit resets
- Model resets as explicit commands or in REST endpoints

# API Breaking Change Process

Breaking Change Steps:
1. Check Customer Visible Public API status
   - Follow special process if route is public-facing
   - Consult Customer Visible Public API documentation

2. Implementation Steps:
   - Publish modified routes under new version
   - Upgrade corresponding API client library
   - Verify API client library usage
   - Update dependent repositories

3. Deprecation Process:
   - Mark old route as deprecated
   - Add error logging in handler for Sentry tracking
   - Monitor for deprecation warnings
   - Ensure no active usage of deprecated route

4. Final Release:
   - Create major version release
   - Remove deprecated routes
   - Update documentation
   - Verify all dependencies updated

Best Practices:
- Validate public API impact before changes
- Maintain clear version progression
- Monitor usage patterns
- Ensure comprehensive logging
- Plan for smooth transitions
- Document all changes thoroughly
- Coordinate with dependent services

# Customer Visible Public API Guidelines

Public API Scope:
- Only expose carefully selected subset of APIs to customers
- Document all public endpoints in OpenAPI specification
- Maintain strict versioning for public endpoints
- Follow consistent URL patterns:
  ```
  https://auth.paretos.io/auth/realms/paretos/protocol/openid-connect/token
  https://use-case.paretos.com/v6/trainingDataFiles/upload
  https://files.paretos.com/v2/upload-token/generate
  ```

Deprecation Process:
- Six-month maximum timeframe for deprecation
- Follow structured deprecation steps:
  1. Update OpenAPI specification with deprecation notice
  2. Create migration guide in Notion
  3. Announce in #focus-customer Slack channel
  4. Work with customer success for integration updates
  5. Obtain customer success confirmation before removal

Best Practices:
- Minimize breaking changes to public APIs
- Provide clear migration paths
- Maintain backwards compatibility when possible
- Document all changes thoroughly
- Coordinate with customer success team
- Monitor API usage during deprecation
- Plan for smooth customer transitions

# Temporal Workflow Guidelines

Preparation:
- Model workflow before implementation using:
  - Activity diagrams
  - State machine diagrams
- Complete necessary refactoring before workflow implementation
- Prepare testing environment:
  - Required configurations
  - System dependencies
  - Test stubs
  - Setup scripts
- Practice Python asyncio before starting

Best Practices:
- Document all workflow states and transitions
- Keep workflows focused and single-purpose
- Handle error cases and retries explicitly
- Consider long-running implications
- Plan for versioning and updates
- Test workflow resilience

Implementation Tips:
- Start with clear workflow boundaries
- Break complex workflows into smaller activities
- Handle timeouts and retries at activity level
- Use compensation logic for rollbacks
- Consider workflow versioning strategy
- Implement proper error handling
- Monitor workflow progress

# Testing Guidelines

Framework and Location:
- Use unittest and pytest for testing
- Place unit tests in `test/unittest` with one test file per application file
- Place integration tests in `test/integrationtest`
- Follow naming convention: `<What>TestCase.test_<expectation>_<condition>()` or `test_<what>_<expectation>_<condition>()`

Testing Purpose:
- Enforce good code architecture through explicit dependencies
- Enable safe refactoring with backwards compatibility checks
- Identify hidden dependencies through failing tests
- Guard against unknown edge cases and potential failures

Test Coverage:
Unit Tests:
- Focus on complex business logic with multiple cases
- Test happy paths and edge cases for critical functionality
- Skip trivial code (simple constructors, getters/setters)
- Add test cases for discovered bugs
- Keep tests focused with single assertions when possible

Integration Tests:
- Test module interactions and dependencies
- Cover happy path scenarios at minimum
- Verify system behavior as a whole

Best Practices:
- Write short, focused tests for single behaviors
- Mock dependencies for controlled testing
- Trust built-in functions and test only integration points
- Test functionality, not implementation details
- Use plain values or fixtures for test data
- Place reusable test utilities in `test/utils`
- Use fixtures or setUp/tearDown for common dependencies
- Create test-specific data within test functions
- Avoid assertions in helper functions unless they're assertion helpers

Test Structure:
- Follow naming patterns:
  - Classes: `<...>TestCase` or `Test<...>`
  - Functions: `test_<what>_<expectation>_<condition>`
    - `<what>`: tested function (optional if clear from scope)
    - `<expectation>`: expected result (required)
    - `<condition>`: test scenario (optional for happy path)

# GitLab CI Guidelines

Pipeline Structure:
- Define CI pipelines in `.gitlab-ci.yaml`
- Use includes from infrastructure repository for base jobs
- Follow predefined pipeline stages:
  - API: test, build, tag, deploy, integration
  - Library: test, release
  - API + Library: test, build, tag, deploy, release, integration

Job Configuration:
- Use extends keyword for inheritance
- Avoid circular dependencies
- Follow base job patterns
- Use proper stage ordering
- Handle job dependencies with needs keyword

Execution Rules:
- Prefer special tags over rules when possible
- Use when keyword appropriately:
  - on_success: run after successful previous jobs
  - on_failure: run after failed jobs
  - always/never: unconditional execution
  - manual: user-triggered execution
- Configure proper job dependencies

Docker Build Guidelines:
- Secure secret handling using buildkit
- Optimize build speed with proper layer caching
- Follow standard build workflow:
  1. Pull latest container
  2. Build with caching
  3. Tag as latest when appropriate
  4. Use existing builds for tagged versions
  5. Deploy tagged containers

Stage-Specific Rules:
1. Test Stage:
   - Run unit tests with coverage
   - Perform static code analysis
   - Execute integration tests
   - Use proper test base configuration

2. Build Stage:
   - Follow build base setup
   - Handle master/tag/branch builds appropriately
   - Manage registry authentication
   - Use proper caching

3. Tag Stage:
   - Follow tagging conventions
   - Handle latest and version tags
   - Maintain proper tag hierarchy

4. Deploy Stage:
   - Configure proper kubectl context
   - Use appropriate helm values
   - Handle dev/prod deployments
   - Manage deployment variables

5. Release Stage:
   - Configure poetry properly
   - Manage package publishing
   - Handle version control

6. Integration Stage:
   - Configure postman tests
   - Handle artifacts properly
   - Manage test environments

7. Run Stage (Custom):
   - Use proper base configuration
   - Handle environment variables
   - Manage container execution

Best Practices:
- Keep pipeline definitions clean and maintainable
- Use proper job inheritance
- Handle secrets securely
- Optimize build performance
- Follow proper deployment strategies
- Maintain clear stage separation
- Use appropriate test coverage

# README.md Structure

Name and Description:
- Use short, purpose-focused description
- Focus on what problem it solves, not how
- Example: "Package to toast bread for breakfast" vs "Package to heat both sides of bread"

Important Notes:
- Critical information not covered in other sections
- Key considerations for users
- Special warnings or requirements

Prerequisites:
- Required software and versions
- Required skills and knowledge
- Necessary credentials and permissions
- Required data or resources
- Any other preconditions for usage

Installation:
- Step-by-step installation process
- Dependencies installation
- Environment setup
- Verification steps

Basic Usage:
- Quick start guide
- Minimal working example
- Common use cases
- Basic command reference

Configuration:
- Configuration file formats
- Environment variables
- Required settings
- Optional settings with defaults
- Configuration examples

Examples:
- Practical usage examples
- Common scenarios
- Code snippets
- Real-world applications

Additional Sections:
1. API Documentation
   - Base URL and versioning
   - Authentication methods
   - Endpoint overview
   - Links to detailed docs

2. Development Setup
   - Local development guide
   - Virtual environment setup
   - Database configuration
   - Environment setup

3. Testing
   - Test suite overview
   - Running tests
   - Coverage information
   - Integration testing

4. Deployment
   - Prerequisites
   - Environment configs
   - Container setup
   - CI/CD pipeline

5. Maintenance
   - Health monitoring
   - Logging
   - Backup procedures
   - Troubleshooting
